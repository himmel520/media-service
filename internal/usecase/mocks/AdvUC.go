// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/himmel520/uoffer/mediaAd/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// AdvUC is an autogenerated mock type for the AdvUC type
type AdvUC struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, adv
func (_m *AdvUC) Add(ctx context.Context, adv *entity.Adv) (*entity.AdvResponse, error) {
	ret := _m.Called(ctx, adv)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *entity.AdvResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Adv) (*entity.AdvResponse, error)); ok {
		return rf(ctx, adv)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Adv) *entity.AdvResponse); ok {
		r0 = rf(ctx, adv)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.AdvResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Adv) error); ok {
		r1 = rf(ctx, adv)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *AdvUC) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCache provides a mock function with given fields: ctx
func (_m *AdvUC) DeleteCache(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllWithFilter provides a mock function with given fields: ctx, limit, offset, posts, priority
func (_m *AdvUC) GetAllWithFilter(ctx context.Context, limit int, offset int, posts []string, priority []string) ([]*entity.AdvResponse, error) {
	ret := _m.Called(ctx, limit, offset, posts, priority)

	if len(ret) == 0 {
		panic("no return value specified for GetAllWithFilter")
	}

	var r0 []*entity.AdvResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, []string, []string) ([]*entity.AdvResponse, error)); ok {
		return rf(ctx, limit, offset, posts, priority)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, []string, []string) []*entity.AdvResponse); ok {
		r0 = rf(ctx, limit, offset, posts, priority)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.AdvResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, []string, []string) error); ok {
		r1 = rf(ctx, limit, offset, posts, priority)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, adv
func (_m *AdvUC) Update(ctx context.Context, id int, adv *entity.AdvUpdate) (*entity.AdvResponse, error) {
	ret := _m.Called(ctx, id, adv)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entity.AdvResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *entity.AdvUpdate) (*entity.AdvResponse, error)); ok {
		return rf(ctx, id, adv)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *entity.AdvUpdate) *entity.AdvResponse); ok {
		r0 = rf(ctx, id, adv)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.AdvResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *entity.AdvUpdate) error); ok {
		r1 = rf(ctx, id, adv)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAdvUC creates a new instance of AdvUC. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdvUC(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdvUC {
	mock := &AdvUC{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
