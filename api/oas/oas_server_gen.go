// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// V1AdminAdsGet implements GET /v1/admin/ads operation.
	//
	// Получает список всех реклам с пагинацией.
	//
	// GET /v1/admin/ads
	V1AdminAdsGet(ctx context.Context, params V1AdminAdsGetParams) (V1AdminAdsGetRes, error)
	// V1AdminAdsIDDelete implements DELETE /v1/admin/ads/{id} operation.
	//
	// Удаляет рекламу по id.
	//
	// DELETE /v1/admin/ads/{id}
	V1AdminAdsIDDelete(ctx context.Context, params V1AdminAdsIDDeleteParams) (V1AdminAdsIDDeleteRes, error)
	// V1AdminAdsIDPut implements PUT /v1/admin/ads/{id} operation.
	//
	// Обновляет рекламу по id.
	//
	// PUT /v1/admin/ads/{id}
	V1AdminAdsIDPut(ctx context.Context, req *AdPut, params V1AdminAdsIDPutParams) (V1AdminAdsIDPutRes, error)
	// V1AdminAdsPost implements POST /v1/admin/ads operation.
	//
	// Создает новую рекламу.
	//
	// POST /v1/admin/ads
	V1AdminAdsPost(ctx context.Context, req *AdPost) (V1AdminAdsPostRes, error)
	// V1AdminColorsGet implements GET /v1/admin/colors operation.
	//
	// Возвращает список цветов с возможностью пагинации.
	//
	// GET /v1/admin/colors
	V1AdminColorsGet(ctx context.Context, params V1AdminColorsGetParams) (V1AdminColorsGetRes, error)
	// V1AdminColorsIDDelete implements DELETE /v1/admin/colors/{id} operation.
	//
	// Удаляет цвет с указанным id.
	//
	// DELETE /v1/admin/colors/{id}
	V1AdminColorsIDDelete(ctx context.Context, params V1AdminColorsIDDeleteParams) (V1AdminColorsIDDeleteRes, error)
	// V1AdminColorsIDPut implements PUT /v1/admin/colors/{id} operation.
	//
	// Обновляет цвет с указанным id.
	//
	// PUT /v1/admin/colors/{id}
	V1AdminColorsIDPut(ctx context.Context, req *ColorPut, params V1AdminColorsIDPutParams) (V1AdminColorsIDPutRes, error)
	// V1AdminColorsPost implements POST /v1/admin/colors operation.
	//
	// Создает новый цвет.
	//
	// POST /v1/admin/colors
	V1AdminColorsPost(ctx context.Context, req *ColorPost) (V1AdminColorsPostRes, error)
	// V1AdminImagesGet implements GET /v1/admin/images operation.
	//
	// Возвращает список изображений с поддержкой пагинации.
	//
	// GET /v1/admin/images
	V1AdminImagesGet(ctx context.Context, params V1AdminImagesGetParams) (V1AdminImagesGetRes, error)
	// V1AdminImagesIDDelete implements DELETE /v1/admin/images/{id} operation.
	//
	// Удаляет изображение с указанным ID.
	//
	// DELETE /v1/admin/images/{id}
	V1AdminImagesIDDelete(ctx context.Context, params V1AdminImagesIDDeleteParams) (V1AdminImagesIDDeleteRes, error)
	// V1AdminImagesIDPut implements PUT /v1/admin/images/{id} operation.
	//
	// Обновляет данные изображения с указанным ID.
	//
	// PUT /v1/admin/images/{id}
	V1AdminImagesIDPut(ctx context.Context, req *ImagePut, params V1AdminImagesIDPutParams) (V1AdminImagesIDPutRes, error)
	// V1AdminImagesPost implements POST /v1/admin/images operation.
	//
	// Создает новый элемент изображения.
	//
	// POST /v1/admin/images
	V1AdminImagesPost(ctx context.Context, req *ImagePost) (V1AdminImagesPostRes, error)
	// V1AdminTgsGet implements GET /v1/admin/tgs operation.
	//
	// Возвращает список  тг с возможностью пагинации.
	//
	// GET /v1/admin/tgs
	V1AdminTgsGet(ctx context.Context, params V1AdminTgsGetParams) (V1AdminTgsGetRes, error)
	// V1AdminTgsIDDelete implements DELETE /v1/admin/tgs/{id} operation.
	//
	// Удаляет тг с указанным id.
	//
	// DELETE /v1/admin/tgs/{id}
	V1AdminTgsIDDelete(ctx context.Context, params V1AdminTgsIDDeleteParams) (V1AdminTgsIDDeleteRes, error)
	// V1AdminTgsIDPut implements PUT /v1/admin/tgs/{id} operation.
	//
	// Обновляет тг с указанным id.
	//
	// PUT /v1/admin/tgs/{id}
	V1AdminTgsIDPut(ctx context.Context, req *TgPut, params V1AdminTgsIDPutParams) (V1AdminTgsIDPutRes, error)
	// V1AdminTgsPost implements POST /v1/admin/tgs operation.
	//
	// Создает новый тг.
	//
	// POST /v1/admin/tgs
	V1AdminTgsPost(ctx context.Context, req *TgPost) (V1AdminTgsPostRes, error)
	// V1AdsGet implements GET /v1/ads operation.
	//
	// Получает список всех реклам с фильтрацией по
	// приоритету и должности.
	//
	// GET /v1/ads
	V1AdsGet(ctx context.Context, params V1AdsGetParams) (V1AdsGetRes, error)
	// V1LogosGet implements GET /v1/logos operation.
	//
	// Возвращает список всех лого.
	//
	// GET /v1/logos
	V1LogosGet(ctx context.Context) (V1LogosGetRes, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
